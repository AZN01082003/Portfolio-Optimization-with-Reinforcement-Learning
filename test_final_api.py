#!/usr/bin/env python3
"""
Test final complet de l'API Portfolio RL avec monitoring.
Script pour valider que tout fonctionne ensemble.
"""
import os
import sys
import time
import json
import requests
import subprocess
import numpy as np
from datetime import datetime
from pathlib import Path

# Ajouter le r√©pertoire du projet au PYTHONPATH
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def install_dependencies():
    """Installe les d√©pendances manquantes."""
    print("üì¶ Installation des d√©pendances...")
    
    dependencies = [
        "fastapi>=0.100.0",
        "uvicorn[standard]>=0.20.0",
        "prometheus-client>=0.15.0",
        "requests>=2.25.1",
        "numpy>=1.20.0"
    ]
    
    for dep in dependencies:
        try:
            print(f"   Installing {dep}...")
            subprocess.check_call([
                sys.executable, "-m", "pip", "install", dep
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print(f"   ‚úÖ {dep}")
        except subprocess.CalledProcessError:
            print(f"   ‚ö†Ô∏è √âchec: {dep}")
    
    print("‚úÖ D√©pendances install√©es")

def create_required_directories():
    """Cr√©e les r√©pertoires requis."""
    print("üìÅ Cr√©ation des r√©pertoires...")
    
    directories = [
        "src",
        "src/api",
        "src/monitoring", 
        "src/models",
        "config",
        "models",
        "logs/api",
        "data/processed"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"   ‚úÖ {directory}")

def create_init_files():
    """Cr√©e les fichiers __init__.py manquants."""
    print("üìù Cr√©ation des fichiers __init__.py...")
    
    init_dirs = [
        "src",
        "src/api", 
        "src/monitoring",
        "src/models"
    ]
    
    for directory in init_dirs:
        init_file = Path(directory) / "__init__.py"
        if not init_file.exists():
            init_file.write_text('"""Package initialization."""\n')
            print(f"   ‚úÖ {init_file}")

def test_imports():
    """Test des imports n√©cessaires."""
    print("üîç Test des imports...")
    
    imports_to_test = [
        ("fastapi", "FastAPI"),
        ("uvicorn", "Uvicorn"),
        ("numpy", "NumPy"),
        ("requests", "Requests")
    ]
    
    missing = []
    
    for module, name in imports_to_test:
        try:
            __import__(module)
            print(f"   ‚úÖ {name}")
        except ImportError:
            print(f"   ‚ùå {name} manquant")
            missing.append(module)
    
    return len(missing) == 0

def start_api_server():
    """D√©marre le serveur API."""
    print("üöÄ D√©marrage du serveur API...")
    
    try:
        # V√©rifier que le fichier main.py existe
        main_file = Path("src/main.py")
        if not main_file.exists():
            print("   ‚ùå Fichier src/main.py non trouv√©")
            return None
        
        # D√©marrer l'API
        process = subprocess.Popen([
            sys.executable, "-m", "uvicorn",
            "src.main:app",
            "--host", "0.0.0.0",
            "--port", "8000",
            "--reload"
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        
        # Attendre que l'API soit pr√™te
        for i in range(30):
            try:
                response = requests.get("http://localhost:8000/health", timeout=2)
                if response.status_code == 200:
                    print("   ‚úÖ API d√©marr√©e avec succ√®s")
                    return process
            except:
                pass
            time.sleep(2)
            print(f"   ‚è≥ Attente... ({i+1}/30)")
        
        print("   ‚ùå Timeout - API non d√©marr√©e")
        process.terminate()
        return None
        
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return None

def test_api_endpoints():
    """Test des endpoints de l'API."""
    print("üß™ Test des endpoints API...")
    
    base_url = "http://localhost:8000"
    results = {}
    
    # Test 1: Health check
    print("   Test 1: Health check...")
    try:
        response = requests.get(f"{base_url}/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"      ‚úÖ Status: {data.get('status')}")
            results['health'] = True
        else:
            print(f"      ‚ùå Status: {response.status_code}")
            results['health'] = False
    except Exception as e:
        print(f"      ‚ùå Erreur: {e}")
        results['health'] = False
    
    # Test 2: Root endpoint
    print("   Test 2: Root endpoint...")
    try:
        response = requests.get(f"{base_url}/", timeout=10)
        if response.status_code == 200:
            print("      ‚úÖ Root OK")
            results['root'] = True
        else:
            print(f"      ‚ùå Status: {response.status_code}")
            results['root'] = False
    except Exception as e:
        print(f"      ‚ùå Erreur: {e}")
        results['root'] = False
    
    # Test 3: Models list
    print("   Test 3: Liste des mod√®les...")
    try:
        response = requests.get(f"{base_url}/models", timeout=10)
        if response.status_code == 200:
            data = response.json()
            models = data.get('models', [])
            print(f"      ‚úÖ {len(models)} mod√®le(s) trouv√©(s)")
            results['models'] = True
        else:
            print(f"      ‚ùå Status: {response.status_code}")
            results['models'] = False
    except Exception as e:
        print(f"      ‚ùå Erreur: {e}")
        results['models'] = False
    
    # Test 4: Test prediction endpoint
    print("   Test 4: Endpoint de test...")
    try:
        response = requests.post(f"{base_url}/test/prediction", timeout=15)
        if response.status_code == 200:
            data = response.json()
            print(f"      ‚úÖ Test: {data.get('status')}")
            results['test'] = True
        else:
            print(f"      ‚ùå Status: {response.status_code}")
            results['test'] = False
    except Exception as e:
        print(f"      ‚ùå Erreur: {e}")
        results['test'] = False
    
    # Test 5: Metrics endpoint
    print("   Test 5: M√©triques...")
    try:
        response = requests.get(f"{base_url}/metrics", timeout=10)
        if response.status_code == 200:
            metrics_text = response.text
            if "portfolio_api_requests_total" in metrics_text:
                print("      ‚úÖ M√©triques Prometheus disponibles")
                results['metrics'] = True
            else:
                print("      ‚ö†Ô∏è M√©triques de base seulement")
                results['metrics'] = False
        else:
            print(f"      ‚ùå Status: {response.status_code}")
            results['metrics'] = False
    except Exception as e:
        print(f"      ‚ùå Erreur: {e}")
        results['metrics'] = False
    
    # Test 6: Prediction compl√®te
    print("   Test 6: Pr√©diction compl√®te...")
    try:
        test_data = {
            "portfolio_id": "test_portfolio_final",
            "market_data": [
                # 5 features x 3 stocks x 30 periods
                [
                    [100 + i for i in range(30)],  # Stock 1
                    [200 + i for i in range(30)],  # Stock 2  
                    [150 + i for i in range(30)]   # Stock 3
                ] for _ in range(5)
            ],
            "current_weights": [0.33, 0.33, 0.34],
            "portfolio_value": 100000.0,
            "risk_tolerance": 0.5
        }
        
        response = requests.post(
            f"{base_url}/predict",
            json=test_data,
            timeout=20
        )
        
        if response.status_code == 200:
            data = response.json()
            weights = data.get('recommended_weights', [])
            if len(weights) == 3 and abs(sum(weights) - 1.0) < 0.01:
                print(f"      ‚úÖ Pr√©diction: {[f'{w:.3f}' for w in weights]}")
                print(f"      üéØ Confiance: {data.get('confidence', 0):.2%}")
                results['prediction'] = True
            else:
                print(f"      ‚ùå Poids invalides: {weights}")
                results['prediction'] = False
        else:
            print(f"      ‚ùå Status: {response.status_code}")
            print(f"      üìù R√©ponse: {response.text[:200]}...")
            results['prediction'] = False
            
    except Exception as e:
        print(f"      ‚ùå Erreur: {e}")
        results['prediction'] = False
    
    return results

def generate_load_test():
    """G√©n√®re de la charge pour tester les m√©triques."""
    print("üìà G√©n√©ration de charge pour test des m√©triques...")
    
    base_url = "http://localhost:8000"
    
    # G√©n√©rer 20 requ√™tes diverses
    endpoints = [
        ("/", "GET"),
        ("/health", "GET"),
        ("/models", "GET"),
        ("/test/prediction", "POST"),
        ("/metrics", "GET")
    ]
    
    for i in range(20):
        endpoint, method = endpoints[i % len(endpoints)]
        try:
            if method == "GET":
                requests.get(f"{base_url}{endpoint}", timeout=5)
            else:
                requests.post(f"{base_url}{endpoint}", timeout=5)
            
            if i % 5 == 0:
                print(f"   üìä {i+1}/20 requ√™tes envoy√©es...")
                
        except:
            pass
        
        time.sleep(0.1)
    
    print("   ‚úÖ Charge g√©n√©r√©e")

def test_metrics_collection():
    """Test la collecte de m√©triques apr√®s g√©n√©ration de charge."""
    print("üìä Test de collecte de m√©triques...")
    
    try:
        response = requests.get("http://localhost:8000/metrics", timeout=10)
        
        if response.status_code == 200:
            metrics_text = response.text
            
            # Chercher des m√©triques sp√©cifiques
            expected_metrics = [
                "portfolio_api_requests_total",
                "portfolio_api_request_duration_seconds",
                "portfolio_model_predictions_total"
            ]
            
            found_metrics = []
            for metric in expected_metrics:
                if metric in metrics_text:
                    found_metrics.append(metric)
                    print(f"   ‚úÖ {metric}")
                else:
                    print(f"   ‚ùå {metric} manquante")
            
            # Analyser quelques valeurs
            lines = metrics_text.split('\n')
            for line in lines:
                if 'portfolio_api_requests_total{' in line and not line.startswith('#'):
                    print(f"   üìà Exemple: {line.strip()}")
                    break
            
            return len(found_metrics) >= 2
        else:
            print(f"   ‚ùå Erreur m√©triques: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False

def check_documentation():
    """V√©rifie l'acc√®s √† la documentation."""
    print("üìö Test de la documentation...")
    
    try:
        # Test Swagger UI
        response = requests.get("http://localhost:8000/docs", timeout=10)
        if response.status_code == 200:
            print("   ‚úÖ Documentation Swagger accessible")
            swagger_ok = True
        else:
            print(f"   ‚ùå Swagger: {response.status_code}")
            swagger_ok = False
        
        # Test ReDoc
        response = requests.get("http://localhost:8000/redoc", timeout=10)
        if response.status_code == 200:
            print("   ‚úÖ Documentation ReDoc accessible")
            redoc_ok = True
        else:
            print(f"   ‚ùå ReDoc: {response.status_code}")
            redoc_ok = False
        
        return swagger_ok or redoc_ok
        
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False

def display_final_results(api_results, metrics_ok, docs_ok):
    """Affiche les r√©sultats finaux."""
    print("\n" + "="*60)
    print("üìã R√âSULTATS FINAUX")
    print("="*60)
    
    # R√©sultats des endpoints
    print("\nüîó ENDPOINTS API:")
    for endpoint, result in api_results.items():
        status = "‚úÖ OK" if result else "‚ùå FAIL"
        print(f"   {status:<8} {endpoint}")
    
    # M√©triques
    metrics_status = "‚úÖ OK" if metrics_ok else "‚ùå FAIL"
    print(f"\nüìä M√âTRIQUES PROMETHEUS: {metrics_status}")
    
    # Documentation
    docs_status = "‚úÖ OK" if docs_ok else "‚ùå FAIL"
    print(f"üìö DOCUMENTATION: {docs_status}")
    
    # Score global
    total_tests = len(api_results) + 2  # +2 pour m√©triques et docs
    passed_tests = sum(api_results.values()) + int(metrics_ok) + int(docs_ok)
    
    print(f"\nüìä SCORE GLOBAL: {passed_tests}/{total_tests} ({passed_tests/total_tests*100:.1f}%)")
    
    if passed_tests == total_tests:
        print("\nüéâ TOUS LES TESTS SONT PASS√âS!")
        print("üí° Votre API Portfolio RL est compl√®tement op√©rationnelle!")
        
        print(f"\nüåê ACC√àS:")
        print(f"   üìç API: http://localhost:8000")
        print(f"   üìö Documentation: http://localhost:8000/docs")
        print(f"   üìä M√©triques: http://localhost:8000/metrics")
        
        print(f"\nüß™ COMMANDES DE TEST:")
        print(f"   python test_prediction.py")
        print(f"   python test_api_complete.py")
        
    elif passed_tests >= total_tests * 0.8:
        print("\n‚ö†Ô∏è LA PLUPART DES TESTS SONT PASS√âS")
        print("üí° Votre API fonctionne avec quelques limitations.")
        
    else:
        print("\n‚ùå PLUSIEURS TESTS ONT √âCHOU√â")
        print("üí° V√©rifiez les erreurs ci-dessus.")
    
    return passed_tests == total_tests

def main():
    """Fonction principale."""
    print("üéØ TEST FINAL - API Portfolio RL avec Monitoring")
    print("="*60)
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    api_process = None
    
    try:
        # √âtape 1: Pr√©paration
        print(f"\n{'='*20} PR√âPARATION {'='*20}")
        install_dependencies()
        create_required_directories()
        create_init_files()
        
        # √âtape 2: Test des imports
        print(f"\n{'='*20} IMPORTS {'='*20}")
        if not test_imports():
            print("‚ùå Imports manquants - installation requise")
            return False
        
        # √âtape 3: D√©marrage de l'API
        print(f"\n{'='*20} D√âMARRAGE API {'='*20}")
        api_process = start_api_server()
        
        if not api_process:
            print("‚ùå Impossible de d√©marrer l'API")
            return False
        
        # √âtape 4: Tests des endpoints
        print(f"\n{'='*20} TESTS ENDPOINTS {'='*20}")
        api_results = test_api_endpoints()
        
        # √âtape 5: G√©n√©ration de charge et test m√©triques
        print(f"\n{'='*20} TESTS M√âTRIQUES {'='*20}")
        generate_load_test()
        metrics_ok = test_metrics_collection()
        
        # √âtape 6: Test documentation
        print(f"\n{'='*20} DOCUMENTATION {'='*20}")
        docs_ok = check_documentation()
        
        # √âtape 7: R√©sultats finaux
        success = display_final_results(api_results, metrics_ok, docs_ok)
        
        # Demander si on garde l'API ouverte
        if success:
            try:
                response = input("\n‚ùì Garder l'API ouverte pour exploration ? (y/N): ")
                if response.lower() in ['y', 'yes', 'oui']:
                    print("üí° API reste ouverte. Fermez avec Ctrl+C quand termin√©.")
                    print(f"   Ou utilisez: kill {api_process.pid}")
                    return True
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è Interruption utilisateur")
        
        return success
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Test interrompu par l'utilisateur")
        return False
        
    except Exception as e:
        print(f"\nüí• Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        # Arr√™ter l'API
        if api_process:
            print("\nüõë Arr√™t de l'API...")
            api_process.terminate()
            try:
                api_process.wait(timeout=5)
            except:
                api_process.kill()

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
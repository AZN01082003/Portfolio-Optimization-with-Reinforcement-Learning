#!/usr/bin/env python3
"""
Script de d√©marrage pour l'API Portfolio RL
G√®re les d√©pendances et d√©marre l'API avec ou sans monitoring
"""
import os
import sys
import subprocess
import time
import logging
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_dependencies():
    """V√©rifie et installe les d√©pendances si n√©cessaire."""
    required_packages = {
        'fastapi': 'fastapi',
        'uvicorn': 'uvicorn[standard]',
        'stable_baselines3': 'stable-baselines3[extra]',
        'prometheus_client': 'prometheus-client'
    }
    
    missing_packages = []
    
    for package, install_name in required_packages.items():
        try:
            __import__(package)
            logger.info(f"‚úÖ {package} disponible")
        except ImportError:
            logger.warning(f"‚ö†Ô∏è {package} manquant")
            missing_packages.append(install_name)
    
    if missing_packages:
        logger.info(f"Installation des packages manquants: {missing_packages}")
        try:
            subprocess.check_call([
                sys.executable, '-m', 'pip', 'install'
            ] + missing_packages)
            logger.info("‚úÖ Installation termin√©e")
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå Erreur installation: {e}")
            return False
    
    return True

def setup_environment():
    """Configure l'environnement."""
    # Ajouter le r√©pertoire racine au PYTHONPATH
    project_root = Path(__file__).parent
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))
    
    # Variables d'environnement pour l'API
    os.environ.setdefault('API_HOST', '0.0.0.0')
    os.environ.setdefault('API_PORT', '8000')
    os.environ.setdefault('MLFLOW_TRACKING_URI', 'http://localhost:5000')
    
    # Cr√©er les r√©pertoires n√©cessaires
    directories = [
        'logs/api',
        'logs/training',
        'data/processed',
        'models'
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        logger.debug(f"üìÅ R√©pertoire cr√©√©/v√©rifi√©: {directory}")

def start_metrics_server():
    """D√©marre le serveur de m√©triques Prometheus."""
    try:
        # Import dynamique pour √©viter les erreurs si pas disponible
        from src.monitoring.simple_metrics import start_metrics_server, simple_portfolio_metrics
        
        if simple_portfolio_metrics and simple_portfolio_metrics.enabled:
            success = start_metrics_server(port=8001, metrics=simple_portfolio_metrics)
            if success:
                logger.info("üìä Serveur de m√©triques d√©marr√© sur le port 8001")
                return True
        
        logger.warning("‚ö†Ô∏è Serveur de m√©triques non d√©marr√©")
        return False
        
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Module de m√©triques non trouv√©: {e}")
        return False
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Impossible de d√©marrer le serveur de m√©triques: {e}")
        return False

def start_api(host='0.0.0.0', port=8000, reload=False, with_metrics=True):
    """D√©marre l'API."""
    try:
        # Import dynamique pour v√©rifier la disponibilit√©
        try:
            import uvicorn
            logger.info("‚úÖ uvicorn disponible")
        except ImportError:
            logger.error("‚ùå uvicorn non disponible")
            return False
        
        # V√©rifier que le module principal existe
        try:
            import src.main
            app = src.main.app
            logger.info("‚úÖ Module API trouv√©")
        except ImportError as e:
            logger.error(f"‚ùå Erreur import src.main: {e}")
            logger.error("üí° V√©rifiez que le fichier src/main.py existe et contient 'app'")
            return False
        
        logger.info(f"üöÄ D√©marrage de l'API sur {host}:{port}")
        
        # D√©marrer le serveur de m√©triques si demand√©
        if with_metrics:
            start_metrics_server()
        
        # Configuration uvicorn
        config = uvicorn.Config(
            "src.main:app",  # Utiliser la cha√Æne d'import
            host=host,
            port=port,
            reload=reload,
            log_level="info",
            access_log=True
        )
        
        server = uvicorn.Server(config)
        server.run()
        
        return True
        
    except KeyboardInterrupt:
        logger.info("üõë Arr√™t demand√© par l'utilisateur")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur d√©marrage API: {e}")
        return False

def test_imports():
    """Teste les imports n√©cessaires."""
    logger.info("üîç Test des imports...")
    
    imports_to_test = [
        ('fastapi', 'FastAPI'),
        ('uvicorn', 'uvicorn'),
        ('src.main', 'Module API principal'),
        ('src.monitoring.simple_metrics', 'Module de m√©triques')
    ]
    
    success = True
    
    for module_name, description in imports_to_test:
        try:
            __import__(module_name)
            logger.info(f"‚úÖ {description} OK")
        except ImportError as e:
            logger.error(f"‚ùå {description} FAILED: {e}")
            success = False
    
    return success

def main():
    """Fonction principale."""
    import argparse
    
    parser = argparse.ArgumentParser(description="D√©marrage de l'API Portfolio RL")
    parser.add_argument("--host", default="0.0.0.0", help="Host de l'API")
    parser.add_argument("--port", type=int, default=8000, help="Port de l'API")
    parser.add_argument("--reload", action="store_true", help="Mode reload pour d√©veloppement")
    parser.add_argument("--no-metrics", action="store_true", help="D√©sactiver le serveur de m√©triques")
    parser.add_argument("--check-only", action="store_true", help="V√©rifier seulement les d√©pendances")
    parser.add_argument("--test-imports", action="store_true", help="Tester les imports")
    
    args = parser.parse_args()
    
    logger.info("üîß Configuration de l'environnement...")
    setup_environment()
    
    if args.test_imports:
        logger.info("üß™ Test des imports...")
        success = test_imports()
        return 0 if success else 1
    
    logger.info("üì¶ V√©rification des d√©pendances...")
    if not check_dependencies():
        logger.error("‚ùå Probl√®me avec les d√©pendances")
        return 1
    
    if args.check_only:
        logger.info("‚úÖ V√©rification termin√©e avec succ√®s")
        logger.info("üí° Pour tester les imports: python start_api.py --test-imports")
        return 0
    
    logger.info("üöÄ D√©marrage de l'API Portfolio RL...")
    success = start_api(
        host=args.host,
        port=args.port,
        reload=args.reload,
        with_metrics=not args.no_metrics
    )
    
    return 0 if success else 1

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        logger.info("üõë Arr√™t demand√© par l'utilisateur")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)